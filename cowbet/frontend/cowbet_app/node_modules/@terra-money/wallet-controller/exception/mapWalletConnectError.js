import { CreateTxFailed, Timeout, TxFailed, TxUnspecifiedError, UserDenied, } from '@terra-money/wallet-types';
import { WalletConnectCreateTxFailed, WalletConnectTimeout, WalletConnectTxFailed, WalletConnectTxUnspecifiedError, WalletConnectUserDenied, } from '../modules/walletconnect';
import { isError } from './isError';
export function mapWalletConnectError(tx, error) {
    if (isError(error, UserDenied) ||
        isError(error, Timeout) ||
        isError(error, CreateTxFailed) ||
        isError(error, TxFailed) ||
        isError(error, TxUnspecifiedError)) {
        return error;
    }
    else if (isError(error, WalletConnectUserDenied)) {
        return new UserDenied();
    }
    else if (isError(error, WalletConnectTimeout)) {
        return new Timeout(error.message);
    }
    else if (isError(error, WalletConnectCreateTxFailed)) {
        return new CreateTxFailed(tx, error.message);
    }
    else if (isError(error, WalletConnectTxFailed)) {
        return new TxFailed(tx, error.txhash, error.message, null);
    }
    else if (isError(error, WalletConnectTxUnspecifiedError)) {
        return new TxUnspecifiedError(tx, error.message);
    }
    return new TxUnspecifiedError(tx, error instanceof Error ? error.message : String(error));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwV2FsbGV0Q29ubmVjdEVycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL0B0ZXJyYS1tb25leS93YWxsZXQtY29udHJvbGxlci9leGNlcHRpb24vbWFwV2FsbGV0Q29ubmVjdEVycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxjQUFjLEVBQ2QsT0FBTyxFQUNQLFFBQVEsRUFDUixrQkFBa0IsRUFDbEIsVUFBVSxHQUNYLE1BQU0sMkJBQTJCLENBQUM7QUFDbkMsT0FBTyxFQUNMLDJCQUEyQixFQUMzQixvQkFBb0IsRUFDcEIscUJBQXFCLEVBQ3JCLCtCQUErQixFQUMvQix1QkFBdUIsR0FDeEIsTUFBTSwwQkFBMEIsQ0FBQztBQUNsQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXBDLE1BQU0sVUFBVSxxQkFBcUIsQ0FDbkMsRUFBbUIsRUFDbkIsS0FBYztJQUVkLElBQ0UsT0FBTyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUM7UUFDMUIsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUM7UUFDdkIsT0FBTyxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUM7UUFDOUIsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUM7UUFDeEIsT0FBTyxDQUFDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxFQUNsQztRQUNBLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7U0FBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLENBQUMsRUFBRTtRQUNsRCxPQUFPLElBQUksVUFBVSxFQUFFLENBQUM7S0FDekI7U0FBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsb0JBQW9CLENBQUMsRUFBRTtRQUMvQyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNuQztTQUFNLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSwyQkFBMkIsQ0FBQyxFQUFFO1FBQ3RELE9BQU8sSUFBSSxjQUFjLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUM5QztTQUFNLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxxQkFBcUIsQ0FBQyxFQUFFO1FBQ2hELE9BQU8sSUFBSSxRQUFRLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM1RDtTQUFNLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSwrQkFBK0IsQ0FBQyxFQUFFO1FBQzFELE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2xEO0lBQ0QsT0FBTyxJQUFJLGtCQUFrQixDQUMzQixFQUFFLEVBQ0YsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUN2RCxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENyZWF0ZVR4T3B0aW9ucyB9IGZyb20gJ0B0ZXJyYS1tb25leS90ZXJyYS5qcyc7XG5pbXBvcnQge1xuICBDcmVhdGVUeEZhaWxlZCxcbiAgVGltZW91dCxcbiAgVHhGYWlsZWQsXG4gIFR4VW5zcGVjaWZpZWRFcnJvcixcbiAgVXNlckRlbmllZCxcbn0gZnJvbSAnQHRlcnJhLW1vbmV5L3dhbGxldC10eXBlcyc7XG5pbXBvcnQge1xuICBXYWxsZXRDb25uZWN0Q3JlYXRlVHhGYWlsZWQsXG4gIFdhbGxldENvbm5lY3RUaW1lb3V0LFxuICBXYWxsZXRDb25uZWN0VHhGYWlsZWQsXG4gIFdhbGxldENvbm5lY3RUeFVuc3BlY2lmaWVkRXJyb3IsXG4gIFdhbGxldENvbm5lY3RVc2VyRGVuaWVkLFxufSBmcm9tICcuLi9tb2R1bGVzL3dhbGxldGNvbm5lY3QnO1xuaW1wb3J0IHsgaXNFcnJvciB9IGZyb20gJy4vaXNFcnJvcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBXYWxsZXRDb25uZWN0RXJyb3IoXG4gIHR4OiBDcmVhdGVUeE9wdGlvbnMsXG4gIGVycm9yOiB1bmtub3duLFxuKTogRXJyb3Ige1xuICBpZiAoXG4gICAgaXNFcnJvcihlcnJvciwgVXNlckRlbmllZCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBUaW1lb3V0KSB8fFxuICAgIGlzRXJyb3IoZXJyb3IsIENyZWF0ZVR4RmFpbGVkKSB8fFxuICAgIGlzRXJyb3IoZXJyb3IsIFR4RmFpbGVkKSB8fFxuICAgIGlzRXJyb3IoZXJyb3IsIFR4VW5zcGVjaWZpZWRFcnJvcilcbiAgKSB7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9IGVsc2UgaWYgKGlzRXJyb3IoZXJyb3IsIFdhbGxldENvbm5lY3RVc2VyRGVuaWVkKSkge1xuICAgIHJldHVybiBuZXcgVXNlckRlbmllZCgpO1xuICB9IGVsc2UgaWYgKGlzRXJyb3IoZXJyb3IsIFdhbGxldENvbm5lY3RUaW1lb3V0KSkge1xuICAgIHJldHVybiBuZXcgVGltZW91dChlcnJvci5tZXNzYWdlKTtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXYWxsZXRDb25uZWN0Q3JlYXRlVHhGYWlsZWQpKSB7XG4gICAgcmV0dXJuIG5ldyBDcmVhdGVUeEZhaWxlZCh0eCwgZXJyb3IubWVzc2FnZSk7XG4gIH0gZWxzZSBpZiAoaXNFcnJvcihlcnJvciwgV2FsbGV0Q29ubmVjdFR4RmFpbGVkKSkge1xuICAgIHJldHVybiBuZXcgVHhGYWlsZWQodHgsIGVycm9yLnR4aGFzaCwgZXJyb3IubWVzc2FnZSwgbnVsbCk7XG4gIH0gZWxzZSBpZiAoaXNFcnJvcihlcnJvciwgV2FsbGV0Q29ubmVjdFR4VW5zcGVjaWZpZWRFcnJvcikpIHtcbiAgICByZXR1cm4gbmV3IFR4VW5zcGVjaWZpZWRFcnJvcih0eCwgZXJyb3IubWVzc2FnZSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBUeFVuc3BlY2lmaWVkRXJyb3IoXG4gICAgdHgsXG4gICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpLFxuICApO1xufVxuIl19