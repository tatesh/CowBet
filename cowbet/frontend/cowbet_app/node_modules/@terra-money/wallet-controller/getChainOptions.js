const FALLBACK_MAINNET = {
    name: 'mainnet',
    chainID: 'columbus-5',
    lcd: 'https://lcd.terra.dev',
};
const FALLBACK = {
    defaultNetwork: FALLBACK_MAINNET,
    walletConnectChainIds: {
        1: FALLBACK_MAINNET,
        0: {
            name: 'testnet',
            chainID: 'bombay-12',
            lcd: 'https://bombay-lcd.terra.dev',
        },
    },
};
let cache;
export async function getChainOptions() {
    return fetch('https://assets.terra.money/chains.json')
        .then((res) => res.json())
        .then((data) => {
        const chains = Object.values(data);
        const walletConnectChainIds = chains.reduce((result, network) => {
            if (typeof network.walletconnectID === 'number') {
                result[network.walletconnectID] = network;
            }
            else if (!result[1] && network.name === 'mainnet') {
                result[1] = network;
            }
            else if (!result[0] && network.name === 'testnet') {
                result[0] = network;
            }
            return result;
        }, {});
        const chainOptions = {
            defaultNetwork: walletConnectChainIds[1],
            walletConnectChainIds,
        };
        cache = chainOptions;
        return chainOptions;
    })
        .catch((error) => {
        console.error('Failed to fetch chains.json', error);
        return cache !== null && cache !== void 0 ? cache : FALLBACK;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0Q2hhaW5PcHRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL0B0ZXJyYS1tb25leS93YWxsZXQtY29udHJvbGxlci9nZXRDaGFpbk9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZUEsTUFBTSxnQkFBZ0IsR0FBRztJQUN2QixJQUFJLEVBQUUsU0FBUztJQUNmLE9BQU8sRUFBRSxZQUFZO0lBQ3JCLEdBQUcsRUFBRSx1QkFBdUI7Q0FDN0IsQ0FBQztBQUVGLE1BQU0sUUFBUSxHQUFpQztJQUM3QyxjQUFjLEVBQUUsZ0JBQWdCO0lBQ2hDLHFCQUFxQixFQUFFO1FBQ3JCLENBQUMsRUFBRSxnQkFBZ0I7UUFDbkIsQ0FBQyxFQUFFO1lBQ0QsSUFBSSxFQUFFLFNBQVM7WUFDZixPQUFPLEVBQUUsV0FBVztZQUNwQixHQUFHLEVBQUUsOEJBQThCO1NBQ3BDO0tBQ0Y7Q0FDRixDQUFDO0FBRUYsSUFBSSxLQUFtQyxDQUFDO0FBRXhDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsZUFBZTtJQUNuQyxPQUFPLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQztTQUNuRCxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUN6QixJQUFJLENBQUMsQ0FBQyxJQUErQixFQUFFLEVBQUU7UUFDeEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxNQUFNLHFCQUFxQixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUU7WUFDOUQsSUFBSSxPQUFPLE9BQU8sQ0FBQyxlQUFlLEtBQUssUUFBUSxFQUFFO2dCQUMvQyxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxHQUFHLE9BQU8sQ0FBQzthQUMzQztpQkFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO2dCQUNuRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO2FBQ3JCO2lCQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7Z0JBQ25ELE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUM7YUFDckI7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDLEVBQUUsRUFBaUMsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sWUFBWSxHQUFpQztZQUNqRCxjQUFjLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLHFCQUFxQjtTQUN0QixDQUFDO1FBQ0YsS0FBSyxHQUFHLFlBQVksQ0FBQztRQUNyQixPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDLENBQUM7U0FDRCxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEQsT0FBTyxLQUFLLGFBQUwsS0FBSyxjQUFMLEtBQUssR0FBSSxRQUFRLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV0d29ya0luZm8gfSBmcm9tICdAdGVycmEtbW9uZXkvd2FsbGV0LXR5cGVzJztcbmltcG9ydCB7IFdhbGxldENvbnRyb2xsZXJPcHRpb25zIH0gZnJvbSAnLi9jb250cm9sbGVyJztcblxuaW50ZXJmYWNlIENoYWluSW5mbyB7XG4gIG5hbWU6IHN0cmluZztcbiAgY2hhaW5JRDogc3RyaW5nO1xuICBsY2Q6IHN0cmluZztcbiAgd2FsbGV0Y29ubmVjdElEPzogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBXYWxsZXRDb250cm9sbGVyQ2hhaW5PcHRpb25zID0gUGljazxcbiAgV2FsbGV0Q29udHJvbGxlck9wdGlvbnMsXG4gICdkZWZhdWx0TmV0d29yaycgfCAnd2FsbGV0Q29ubmVjdENoYWluSWRzJ1xuPjtcblxuY29uc3QgRkFMTEJBQ0tfTUFJTk5FVCA9IHtcbiAgbmFtZTogJ21haW5uZXQnLFxuICBjaGFpbklEOiAnY29sdW1idXMtNScsXG4gIGxjZDogJ2h0dHBzOi8vbGNkLnRlcnJhLmRldicsXG59O1xuXG5jb25zdCBGQUxMQkFDSzogV2FsbGV0Q29udHJvbGxlckNoYWluT3B0aW9ucyA9IHtcbiAgZGVmYXVsdE5ldHdvcms6IEZBTExCQUNLX01BSU5ORVQsXG4gIHdhbGxldENvbm5lY3RDaGFpbklkczoge1xuICAgIDE6IEZBTExCQUNLX01BSU5ORVQsXG4gICAgMDoge1xuICAgICAgbmFtZTogJ3Rlc3RuZXQnLFxuICAgICAgY2hhaW5JRDogJ2JvbWJheS0xMicsXG4gICAgICBsY2Q6ICdodHRwczovL2JvbWJheS1sY2QudGVycmEuZGV2JyxcbiAgICB9LFxuICB9LFxufTtcblxubGV0IGNhY2hlOiBXYWxsZXRDb250cm9sbGVyQ2hhaW5PcHRpb25zO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q2hhaW5PcHRpb25zKCk6IFByb21pc2U8V2FsbGV0Q29udHJvbGxlckNoYWluT3B0aW9ucz4ge1xuICByZXR1cm4gZmV0Y2goJ2h0dHBzOi8vYXNzZXRzLnRlcnJhLm1vbmV5L2NoYWlucy5qc29uJylcbiAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgIC50aGVuKChkYXRhOiBSZWNvcmQ8c3RyaW5nLCBDaGFpbkluZm8+KSA9PiB7XG4gICAgICBjb25zdCBjaGFpbnMgPSBPYmplY3QudmFsdWVzKGRhdGEpO1xuICAgICAgY29uc3Qgd2FsbGV0Q29ubmVjdENoYWluSWRzID0gY2hhaW5zLnJlZHVjZSgocmVzdWx0LCBuZXR3b3JrKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV0d29yay53YWxsZXRjb25uZWN0SUQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgcmVzdWx0W25ldHdvcmsud2FsbGV0Y29ubmVjdElEXSA9IG5ldHdvcms7XG4gICAgICAgIH0gZWxzZSBpZiAoIXJlc3VsdFsxXSAmJiBuZXR3b3JrLm5hbWUgPT09ICdtYWlubmV0Jykge1xuICAgICAgICAgIHJlc3VsdFsxXSA9IG5ldHdvcms7XG4gICAgICAgIH0gZWxzZSBpZiAoIXJlc3VsdFswXSAmJiBuZXR3b3JrLm5hbWUgPT09ICd0ZXN0bmV0Jykge1xuICAgICAgICAgIHJlc3VsdFswXSA9IG5ldHdvcms7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0sIHt9IGFzIFJlY29yZDxudW1iZXIsIE5ldHdvcmtJbmZvPik7XG4gICAgICBjb25zdCBjaGFpbk9wdGlvbnM6IFdhbGxldENvbnRyb2xsZXJDaGFpbk9wdGlvbnMgPSB7XG4gICAgICAgIGRlZmF1bHROZXR3b3JrOiB3YWxsZXRDb25uZWN0Q2hhaW5JZHNbMV0sXG4gICAgICAgIHdhbGxldENvbm5lY3RDaGFpbklkcyxcbiAgICAgIH07XG4gICAgICBjYWNoZSA9IGNoYWluT3B0aW9ucztcbiAgICAgIHJldHVybiBjaGFpbk9wdGlvbnM7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggY2hhaW5zLmpzb24nLCBlcnJvcik7XG4gICAgICByZXR1cm4gY2FjaGUgPz8gRkFMTEJBQ0s7XG4gICAgfSk7XG59XG4iXX0=