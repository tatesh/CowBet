import { WebExtensionStatus, } from '@terra-money/web-extension-interface';
import { BehaviorSubject } from 'rxjs';
import { isDesktopChrome } from '../../utils/browser-check';
import { LegacyExtensionConnector } from '../legacy-extension';
import { selectModal } from './modal';
import { getTerraExtensions } from './multiChannel';
import { clearSession, getStoredSession, storeSession } from './session';
import { ExtensionRouterConnectorType, ExtensionRouterStatus, } from './types';
export class ExtensionRouter {
    constructor(options) {
        var _a, _b;
        this.options = options;
        this._connector = null;
        // ---------------------------------------------
        // states
        // ---------------------------------------------
        this.states = () => {
            return this._states.asObservable();
        };
        this.getLastStates = () => {
            return this._states.getValue();
        };
        // ---------------------------------------------
        // behaviors
        // ---------------------------------------------
        this.connect = async (identifier) => {
            var _a;
            const extensionInfos = getTerraExtensions();
            if (extensionInfos.length === 0) {
                throw new Error(`[ExtensionRouter] Can't find connectors`);
            }
            let extensionInfo;
            if (identifier) {
                extensionInfo = extensionInfos.find((item) => item.identifier === identifier);
            }
            else if (extensionInfos.length === 1) {
                extensionInfo = extensionInfos[0];
            }
            else {
                const select = (_a = this.options.selectExtension) !== null && _a !== void 0 ? _a : selectModal;
                const selectedExtensionInfo = await select(extensionInfos);
                if (selectedExtensionInfo) {
                    extensionInfo = selectedExtensionInfo;
                }
            }
            if (extensionInfo) {
                this.createConnector(extensionInfo);
            }
        };
        this.disconnect = () => {
            var _a;
            clearSession();
            this._states.next({
                type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,
                network: this.options.defaultNetwork,
            });
            (_a = this._connector) === null || _a === void 0 ? void 0 : _a.close();
            this._connector = null;
        };
        this.requestApproval = () => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            this._connector.requestApproval();
        };
        this.refetchStates = () => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            this._connector.refetchStates();
        };
        this.post = (tx, terraAddress) => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            const latestStates = this.getLastStates();
            if (latestStates.type !== ExtensionRouterStatus.WALLET_CONNECTED) {
                throw new Error(`[ExtensionRouter] Wallet is not connected`);
            }
            return this._connector.post(terraAddress !== null && terraAddress !== void 0 ? terraAddress : latestStates.wallet.terraAddress, tx);
        };
        this.sign = (tx, terraAddress) => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            const latestStates = this.getLastStates();
            if (latestStates.type !== ExtensionRouterStatus.WALLET_CONNECTED) {
                throw new Error(`[ExtensionRouter] Wallet is not connected`);
            }
            return this._connector.sign(terraAddress !== null && terraAddress !== void 0 ? terraAddress : latestStates.wallet.terraAddress, tx);
        };
        this.signBytes = (bytes, terraAddress) => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            const latestStates = this.getLastStates();
            if (latestStates.type !== ExtensionRouterStatus.WALLET_CONNECTED) {
                throw new Error(`[ExtensionRouter] Wallet is not connected`);
            }
            return this._connector.signBytes(terraAddress !== null && terraAddress !== void 0 ? terraAddress : latestStates.wallet.terraAddress, bytes);
        };
        this.hasCW20Tokens = (chainID, ...tokenAddrs) => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            else if (this._connector instanceof LegacyExtensionConnector) {
                throw new Error('[ExtensionRouter] Legacy extension does not support hasCW20Tokens() ');
            }
            return this._connector.hasCW20Tokens(chainID, ...tokenAddrs);
        };
        this.addCW20Tokens = (chainID, ...tokenAddrs) => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            else if (this._connector instanceof LegacyExtensionConnector) {
                throw new Error('[ExtensionRouter] Legacy extension does not support addCW20Tokens() ');
            }
            return this._connector.addCW20Tokens(chainID, ...tokenAddrs);
        };
        this.hasNetwork = (network) => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            else if (this._connector instanceof LegacyExtensionConnector) {
                throw new Error('[ExtensionRouter] Legacy extension does not support hasNetwork() ');
            }
            return this._connector.hasNetwork(network);
        };
        this.addNetwork = (network) => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            else if (this._connector instanceof LegacyExtensionConnector) {
                throw new Error('[ExtensionRouter] Legacy extension does not support addNetwork() ');
            }
            return this._connector.addNetwork(network);
        };
        // ---------------------------------------------
        // internal
        // ---------------------------------------------
        this.createConnector = (extensionInfo) => {
            var _a;
            (_a = this._connector) === null || _a === void 0 ? void 0 : _a.close();
            if (!extensionInfo.connector && !this.isDesktopChrome) {
                throw new Error(`[ExtensionRouter] Legacy extension only support the desktop chrome`);
            }
            const connectorPromise = extensionInfo.connector
                ? Promise.resolve(extensionInfo.connector())
                : Promise.resolve(new LegacyExtensionConnector(extensionInfo.identifier));
            connectorPromise.then((connector) => {
                var _a;
                connector.open((_a = this.options.hostWindow) !== null && _a !== void 0 ? _a : window, {
                    next: (nextStates) => {
                        var _a;
                        if (nextStates.type === WebExtensionStatus.INITIALIZING) {
                            this._states.next({
                                type: ExtensionRouterStatus.INITIALIZING,
                                network: this.options.defaultNetwork,
                            });
                        }
                        else if (nextStates.type === WebExtensionStatus.NO_AVAILABLE) {
                            this._states.next({
                                type: ExtensionRouterStatus.NO_AVAILABLE,
                                network: this.options.defaultNetwork,
                                isConnectorExists: true,
                                isApproved: nextStates.isApproved,
                            });
                        }
                        else if (nextStates.wallets.length === 0) {
                            this._states.next({
                                type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,
                                network: nextStates.network,
                            });
                        }
                        else {
                            this._states.next({
                                type: ExtensionRouterStatus.WALLET_CONNECTED,
                                network: nextStates.network,
                                wallet: nextStates.focusedWalletAddress
                                    ? (_a = nextStates.wallets.find((itemWallet) => itemWallet.terraAddress ===
                                        nextStates.focusedWalletAddress)) !== null && _a !== void 0 ? _a : nextStates.wallets[0]
                                    : nextStates.wallets[0],
                                connectorType: connector instanceof LegacyExtensionConnector
                                    ? ExtensionRouterConnectorType.LEGACY
                                    : ExtensionRouterConnectorType.WEB_EXTENSION,
                                supportFeatures: new Set(connector.supportFeatures()),
                                extensionInfo,
                            });
                        }
                    },
                    error: (error) => {
                        console.error(error);
                    },
                    complete: () => { },
                });
                this._connector = connector;
                storeSession({
                    identifier: extensionInfo.identifier,
                });
            });
        };
        this.isDesktopChrome =
            typeof window !== 'undefined' &&
                isDesktopChrome((_b = (_a = options.dangerously__chromeExtensionCompatibleBrowserCheck) === null || _a === void 0 ? void 0 : _a.call(options, navigator.userAgent)) !== null && _b !== void 0 ? _b : false);
        this._states = new BehaviorSubject({
            type: ExtensionRouterStatus.INITIALIZING,
            network: options.defaultNetwork,
        });
        this._extensionInfos = getTerraExtensions();
        if (this._extensionInfos.length === 0) {
            this._states.next({
                type: ExtensionRouterStatus.NO_AVAILABLE,
                network: options.defaultNetwork,
                isConnectorExists: false,
            });
            return;
        }
        // ---------------------------------------------
        // initialize session
        // ---------------------------------------------
        const session = getStoredSession();
        if (session) {
            const extensionInfo = this._extensionInfos.find((item) => item.identifier === session.identifier);
            if (extensionInfo) {
                this.createConnector(extensionInfo);
                return;
            }
            else {
                console.warn(`Can't find an extension for the session "${session.identifier}"`);
                clearSession();
                this._states.next({
                    type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,
                    network: options.defaultNetwork,
                });
            }
        }
        else {
            this._states.next({
                type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,
                network: options.defaultNetwork,
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,