"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExtensions = void 0;
const rxjs_1 = require("rxjs");
const fetch_1 = require("rxjs/fetch");
const operators_1 = require("rxjs/operators");
const browser_check_1 = require("../utils/browser-check");
const FALLBACK = {
    whitelist: [
        {
            name: 'Terra Station',
            identifier: 'station',
            icon: 'https://assets.terra.money/icon/station-extension/icon.png',
            urls: [
                {
                    browser: 'chrome',
                    url: 'https://chrome.google.com/webstore/detail/terra-station/aiifbnbfobpmeekipheeijimdpnlpgpp',
                },
            ],
        },
        {
            name: 'XDEFI Wallet',
            identifier: 'xdefi-wallet',
            icon: 'https://xdefi-prod-common-ui.s3.eu-west-1.amazonaws.com/logo.svg',
            urls: [
                {
                    browser: 'chrome',
                    url: 'https://chrome.google.com/webstore/detail/xdefi-wallet/hmeobnfnfcmdkdcmlblgagmfpfboieaf',
                },
            ],
        },
    ],
};
function getExtensions() {
    const currentBrowser = (0, browser_check_1.getDesktopBrowserType)(navigator.userAgent);
    if (!currentBrowser) {
        return (0, rxjs_1.of)([]);
    }
    return (0, fetch_1.fromFetch)('https://assets.terra.money/extensions.json').pipe((0, rxjs_1.switchMap)((res) => {
        if (res.ok) {
            return res.json();
        }
        else {
            return (0, rxjs_1.of)(FALLBACK);
        }
    }), (0, operators_1.catchError)(() => {
        return (0, rxjs_1.of)(FALLBACK);
    }), (0, operators_1.map)(({ whitelist }) => {
        return whitelist
            .filter(({ urls }) => urls.some(({ browser }) => currentBrowser === browser))
            .map(({ name, identifier, icon, urls }) => {
            return {
                name,
                identifier,
                icon,
                url: urls.find(({ browser }) => currentBrowser === browser).url,
            };
        });
    }));
}
exports.getExtensions = getExtensions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0RXh0ZW5zaW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AdGVycmEtbW9uZXkvd2FsbGV0LWNvbnRyb2xsZXIvb3BlcmF0b3JzL2dldEV4dGVuc2lvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQWlEO0FBQ2pELHNDQUF1QztBQUN2Qyw4Q0FBaUQ7QUFDakQsMERBQStEO0FBYy9ELE1BQU0sUUFBUSxHQUFlO0lBQzNCLFNBQVMsRUFBRTtRQUNUO1lBQ0UsSUFBSSxFQUFFLGVBQWU7WUFDckIsVUFBVSxFQUFFLFNBQVM7WUFDckIsSUFBSSxFQUFFLDREQUE0RDtZQUNsRSxJQUFJLEVBQUU7Z0JBQ0o7b0JBQ0UsT0FBTyxFQUFFLFFBQVE7b0JBQ2pCLEdBQUcsRUFBRSwwRkFBMEY7aUJBQ2hHO2FBQ0Y7U0FDRjtRQUNEO1lBQ0UsSUFBSSxFQUFFLGNBQWM7WUFDcEIsVUFBVSxFQUFFLGNBQWM7WUFDMUIsSUFBSSxFQUFFLGtFQUFrRTtZQUN4RSxJQUFJLEVBQUU7Z0JBQ0o7b0JBQ0UsT0FBTyxFQUFFLFFBQVE7b0JBQ2pCLEdBQUcsRUFBRSx5RkFBeUY7aUJBQy9GO2FBQ0Y7U0FDRjtLQUNGO0NBQ0YsQ0FBQztBQVNGLFNBQWdCLGFBQWE7SUFDM0IsTUFBTSxjQUFjLEdBQUcsSUFBQSxxQ0FBcUIsRUFBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFbEUsSUFBSSxDQUFDLGNBQWMsRUFBRTtRQUNuQixPQUFPLElBQUEsU0FBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ2Y7SUFFRCxPQUFPLElBQUEsaUJBQVMsRUFBQyw0Q0FBNEMsQ0FBQyxDQUFDLElBQUksQ0FLakUsSUFBQSxnQkFBUyxFQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDaEIsSUFBSSxHQUFHLENBQUMsRUFBRSxFQUFFO1lBQ1YsT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDbkI7YUFBTTtZQUNMLE9BQU8sSUFBQSxTQUFFLEVBQUMsUUFBUSxDQUFDLENBQUM7U0FDckI7SUFDSCxDQUFDLENBQUMsRUFDRixJQUFBLHNCQUFVLEVBQUMsR0FBRyxFQUFFO1FBQ2QsT0FBTyxJQUFBLFNBQUUsRUFBQyxRQUFRLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUMsRUFDRixJQUFBLGVBQUcsRUFBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRTtRQUNwQixPQUFPLFNBQVM7YUFDYixNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLGNBQWMsS0FBSyxPQUFPLENBQUMsQ0FDdkQ7YUFDQSxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUU7WUFDeEMsT0FBTztnQkFDTCxJQUFJO2dCQUNKLFVBQVU7Z0JBQ1YsSUFBSTtnQkFDSixHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLGNBQWMsS0FBSyxPQUFPLENBQUUsQ0FBQyxHQUFHO2FBQ2pFLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDSixDQUFDO0FBckNELHNDQXFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIG9mLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZyb21GZXRjaCB9IGZyb20gJ3J4anMvZmV0Y2gnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgZ2V0RGVza3RvcEJyb3dzZXJUeXBlIH0gZnJvbSAnLi4vdXRpbHMvYnJvd3Nlci1jaGVjayc7XG5cbmludGVyZmFjZSBFeHRlbnNpb25zIHtcbiAgd2hpdGVsaXN0OiBBcnJheTx7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGlkZW50aWZpZXI6IHN0cmluZztcbiAgICBpY29uOiBzdHJpbmc7XG4gICAgdXJsczogQXJyYXk8e1xuICAgICAgYnJvd3NlcjogJ2Nocm9tZScgfCAnZWRnZScgfCAnZmlyZWZveCcgfCAnc2FmYXJpJztcbiAgICAgIHVybDogc3RyaW5nO1xuICAgIH0+O1xuICB9Pjtcbn1cblxuY29uc3QgRkFMTEJBQ0s6IEV4dGVuc2lvbnMgPSB7XG4gIHdoaXRlbGlzdDogW1xuICAgIHtcbiAgICAgIG5hbWU6ICdUZXJyYSBTdGF0aW9uJyxcbiAgICAgIGlkZW50aWZpZXI6ICdzdGF0aW9uJyxcbiAgICAgIGljb246ICdodHRwczovL2Fzc2V0cy50ZXJyYS5tb25leS9pY29uL3N0YXRpb24tZXh0ZW5zaW9uL2ljb24ucG5nJyxcbiAgICAgIHVybHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGJyb3dzZXI6ICdjaHJvbWUnLFxuICAgICAgICAgIHVybDogJ2h0dHBzOi8vY2hyb21lLmdvb2dsZS5jb20vd2Vic3RvcmUvZGV0YWlsL3RlcnJhLXN0YXRpb24vYWlpZmJuYmZvYnBtZWVraXBoZWVpamltZHBubHBncHAnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdYREVGSSBXYWxsZXQnLFxuICAgICAgaWRlbnRpZmllcjogJ3hkZWZpLXdhbGxldCcsXG4gICAgICBpY29uOiAnaHR0cHM6Ly94ZGVmaS1wcm9kLWNvbW1vbi11aS5zMy5ldS13ZXN0LTEuYW1hem9uYXdzLmNvbS9sb2dvLnN2ZycsXG4gICAgICB1cmxzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBicm93c2VyOiAnY2hyb21lJyxcbiAgICAgICAgICB1cmw6ICdodHRwczovL2Nocm9tZS5nb29nbGUuY29tL3dlYnN0b3JlL2RldGFpbC94ZGVmaS13YWxsZXQvaG1lb2JuZm5mY21ka2RjbWxibGdhZ21mcGZib2llYWYnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICBdLFxufTtcblxuaW50ZXJmYWNlIEluc3RhbGxhYmxlRXh0ZW5zaW9uIHtcbiAgbmFtZTogc3RyaW5nO1xuICBpZGVudGlmaWVyOiBzdHJpbmc7XG4gIGljb246IHN0cmluZztcbiAgdXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFeHRlbnNpb25zKCk6IE9ic2VydmFibGU8SW5zdGFsbGFibGVFeHRlbnNpb25bXT4ge1xuICBjb25zdCBjdXJyZW50QnJvd3NlciA9IGdldERlc2t0b3BCcm93c2VyVHlwZShuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuICBpZiAoIWN1cnJlbnRCcm93c2VyKSB7XG4gICAgcmV0dXJuIG9mKFtdKTtcbiAgfVxuXG4gIHJldHVybiBmcm9tRmV0Y2goJ2h0dHBzOi8vYXNzZXRzLnRlcnJhLm1vbmV5L2V4dGVuc2lvbnMuanNvbicpLnBpcGU8XG4gICAgRXh0ZW5zaW9ucyxcbiAgICBFeHRlbnNpb25zLFxuICAgIEluc3RhbGxhYmxlRXh0ZW5zaW9uW11cbiAgPihcbiAgICBzd2l0Y2hNYXAoKHJlcykgPT4ge1xuICAgICAgaWYgKHJlcy5vaykge1xuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBvZihGQUxMQkFDSyk7XG4gICAgICB9XG4gICAgfSksXG4gICAgY2F0Y2hFcnJvcigoKSA9PiB7XG4gICAgICByZXR1cm4gb2YoRkFMTEJBQ0spO1xuICAgIH0pLFxuICAgIG1hcCgoeyB3aGl0ZWxpc3QgfSkgPT4ge1xuICAgICAgcmV0dXJuIHdoaXRlbGlzdFxuICAgICAgICAuZmlsdGVyKCh7IHVybHMgfSkgPT5cbiAgICAgICAgICB1cmxzLnNvbWUoKHsgYnJvd3NlciB9KSA9PiBjdXJyZW50QnJvd3NlciA9PT0gYnJvd3NlciksXG4gICAgICAgIClcbiAgICAgICAgLm1hcCgoeyBuYW1lLCBpZGVudGlmaWVyLCBpY29uLCB1cmxzIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGlkZW50aWZpZXIsXG4gICAgICAgICAgICBpY29uLFxuICAgICAgICAgICAgdXJsOiB1cmxzLmZpbmQoKHsgYnJvd3NlciB9KSA9PiBjdXJyZW50QnJvd3NlciA9PT0gYnJvd3NlcikhLnVybCxcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9KSxcbiAgKTtcbn1cbiJdfQ==