"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapWalletConnectError = void 0;
const wallet_types_1 = require("@terra-money/wallet-types");
const walletconnect_1 = require("../modules/walletconnect");
const isError_1 = require("./isError");
function mapWalletConnectError(tx, error) {
    if ((0, isError_1.isError)(error, wallet_types_1.UserDenied) ||
        (0, isError_1.isError)(error, wallet_types_1.Timeout) ||
        (0, isError_1.isError)(error, wallet_types_1.CreateTxFailed) ||
        (0, isError_1.isError)(error, wallet_types_1.TxFailed) ||
        (0, isError_1.isError)(error, wallet_types_1.TxUnspecifiedError)) {
        return error;
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectUserDenied)) {
        return new wallet_types_1.UserDenied();
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectTimeout)) {
        return new wallet_types_1.Timeout(error.message);
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectCreateTxFailed)) {
        return new wallet_types_1.CreateTxFailed(tx, error.message);
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectTxFailed)) {
        return new wallet_types_1.TxFailed(tx, error.txhash, error.message, null);
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectTxUnspecifiedError)) {
        return new wallet_types_1.TxUnspecifiedError(tx, error.message);
    }
    return new wallet_types_1.TxUnspecifiedError(tx, error instanceof Error ? error.message : String(error));
}
exports.mapWalletConnectError = mapWalletConnectError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwV2FsbGV0Q29ubmVjdEVycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL0B0ZXJyYS1tb25leS93YWxsZXQtY29udHJvbGxlci9leGNlcHRpb24vbWFwV2FsbGV0Q29ubmVjdEVycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDREQU1tQztBQUNuQyw0REFNa0M7QUFDbEMsdUNBQW9DO0FBRXBDLFNBQWdCLHFCQUFxQixDQUNuQyxFQUFtQixFQUNuQixLQUFjO0lBRWQsSUFDRSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLHlCQUFVLENBQUM7UUFDMUIsSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxzQkFBTyxDQUFDO1FBQ3ZCLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsNkJBQWMsQ0FBQztRQUM5QixJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLHVCQUFRLENBQUM7UUFDeEIsSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxpQ0FBa0IsQ0FBQyxFQUNsQztRQUNBLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7U0FBTSxJQUFJLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsdUNBQXVCLENBQUMsRUFBRTtRQUNsRCxPQUFPLElBQUkseUJBQVUsRUFBRSxDQUFDO0tBQ3pCO1NBQU0sSUFBSSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLG9DQUFvQixDQUFDLEVBQUU7UUFDL0MsT0FBTyxJQUFJLHNCQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ25DO1NBQU0sSUFBSSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLDJDQUEyQixDQUFDLEVBQUU7UUFDdEQsT0FBTyxJQUFJLDZCQUFjLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUM5QztTQUFNLElBQUksSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxxQ0FBcUIsQ0FBQyxFQUFFO1FBQ2hELE9BQU8sSUFBSSx1QkFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDNUQ7U0FBTSxJQUFJLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsK0NBQStCLENBQUMsRUFBRTtRQUMxRCxPQUFPLElBQUksaUNBQWtCLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNsRDtJQUNELE9BQU8sSUFBSSxpQ0FBa0IsQ0FDM0IsRUFBRSxFQUNGLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FDdkQsQ0FBQztBQUNKLENBQUM7QUEzQkQsc0RBMkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3JlYXRlVHhPcHRpb25zIH0gZnJvbSAnQHRlcnJhLW1vbmV5L3RlcnJhLmpzJztcbmltcG9ydCB7XG4gIENyZWF0ZVR4RmFpbGVkLFxuICBUaW1lb3V0LFxuICBUeEZhaWxlZCxcbiAgVHhVbnNwZWNpZmllZEVycm9yLFxuICBVc2VyRGVuaWVkLFxufSBmcm9tICdAdGVycmEtbW9uZXkvd2FsbGV0LXR5cGVzJztcbmltcG9ydCB7XG4gIFdhbGxldENvbm5lY3RDcmVhdGVUeEZhaWxlZCxcbiAgV2FsbGV0Q29ubmVjdFRpbWVvdXQsXG4gIFdhbGxldENvbm5lY3RUeEZhaWxlZCxcbiAgV2FsbGV0Q29ubmVjdFR4VW5zcGVjaWZpZWRFcnJvcixcbiAgV2FsbGV0Q29ubmVjdFVzZXJEZW5pZWQsXG59IGZyb20gJy4uL21vZHVsZXMvd2FsbGV0Y29ubmVjdCc7XG5pbXBvcnQgeyBpc0Vycm9yIH0gZnJvbSAnLi9pc0Vycm9yJztcblxuZXhwb3J0IGZ1bmN0aW9uIG1hcFdhbGxldENvbm5lY3RFcnJvcihcbiAgdHg6IENyZWF0ZVR4T3B0aW9ucyxcbiAgZXJyb3I6IHVua25vd24sXG4pOiBFcnJvciB7XG4gIGlmIChcbiAgICBpc0Vycm9yKGVycm9yLCBVc2VyRGVuaWVkKSB8fFxuICAgIGlzRXJyb3IoZXJyb3IsIFRpbWVvdXQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgQ3JlYXRlVHhGYWlsZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVHhGYWlsZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVHhVbnNwZWNpZmllZEVycm9yKVxuICApIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH0gZWxzZSBpZiAoaXNFcnJvcihlcnJvciwgV2FsbGV0Q29ubmVjdFVzZXJEZW5pZWQpKSB7XG4gICAgcmV0dXJuIG5ldyBVc2VyRGVuaWVkKCk7XG4gIH0gZWxzZSBpZiAoaXNFcnJvcihlcnJvciwgV2FsbGV0Q29ubmVjdFRpbWVvdXQpKSB7XG4gICAgcmV0dXJuIG5ldyBUaW1lb3V0KGVycm9yLm1lc3NhZ2UpO1xuICB9IGVsc2UgaWYgKGlzRXJyb3IoZXJyb3IsIFdhbGxldENvbm5lY3RDcmVhdGVUeEZhaWxlZCkpIHtcbiAgICByZXR1cm4gbmV3IENyZWF0ZVR4RmFpbGVkKHR4LCBlcnJvci5tZXNzYWdlKTtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXYWxsZXRDb25uZWN0VHhGYWlsZWQpKSB7XG4gICAgcmV0dXJuIG5ldyBUeEZhaWxlZCh0eCwgZXJyb3IudHhoYXNoLCBlcnJvci5tZXNzYWdlLCBudWxsKTtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXYWxsZXRDb25uZWN0VHhVbnNwZWNpZmllZEVycm9yKSkge1xuICAgIHJldHVybiBuZXcgVHhVbnNwZWNpZmllZEVycm9yKHR4LCBlcnJvci5tZXNzYWdlKTtcbiAgfVxuICByZXR1cm4gbmV3IFR4VW5zcGVjaWZpZWRFcnJvcihcbiAgICB0eCxcbiAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvciksXG4gICk7XG59XG4iXX0=