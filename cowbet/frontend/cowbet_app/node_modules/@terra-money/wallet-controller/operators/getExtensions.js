import { of, switchMap } from 'rxjs';
import { fromFetch } from 'rxjs/fetch';
import { catchError, map } from 'rxjs/operators';
import { getDesktopBrowserType } from '../utils/browser-check';
const FALLBACK = {
    whitelist: [
        {
            name: 'Terra Station',
            identifier: 'station',
            icon: 'https://assets.terra.money/icon/station-extension/icon.png',
            urls: [
                {
                    browser: 'chrome',
                    url: 'https://chrome.google.com/webstore/detail/terra-station/aiifbnbfobpmeekipheeijimdpnlpgpp',
                },
            ],
        },
        {
            name: 'XDEFI Wallet',
            identifier: 'xdefi-wallet',
            icon: 'https://xdefi-prod-common-ui.s3.eu-west-1.amazonaws.com/logo.svg',
            urls: [
                {
                    browser: 'chrome',
                    url: 'https://chrome.google.com/webstore/detail/xdefi-wallet/hmeobnfnfcmdkdcmlblgagmfpfboieaf',
                },
            ],
        },
    ],
};
export function getExtensions() {
    const currentBrowser = getDesktopBrowserType(navigator.userAgent);
    if (!currentBrowser) {
        return of([]);
    }
    return fromFetch('https://assets.terra.money/extensions.json').pipe(switchMap((res) => {
        if (res.ok) {
            return res.json();
        }
        else {
            return of(FALLBACK);
        }
    }), catchError(() => {
        return of(FALLBACK);
    }), map(({ whitelist }) => {
        return whitelist
            .filter(({ urls }) => urls.some(({ browser }) => currentBrowser === browser))
            .map(({ name, identifier, icon, urls }) => {
            return {
                name,
                identifier,
                icon,
                url: urls.find(({ browser }) => currentBrowser === browser).url,
            };
        });
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0RXh0ZW5zaW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9AdGVycmEtbW9uZXkvd2FsbGV0LWNvbnRyb2xsZXIvb3BlcmF0b3JzL2dldEV4dGVuc2lvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBYy9ELE1BQU0sUUFBUSxHQUFlO0lBQzNCLFNBQVMsRUFBRTtRQUNUO1lBQ0UsSUFBSSxFQUFFLGVBQWU7WUFDckIsVUFBVSxFQUFFLFNBQVM7WUFDckIsSUFBSSxFQUFFLDREQUE0RDtZQUNsRSxJQUFJLEVBQUU7Z0JBQ0o7b0JBQ0UsT0FBTyxFQUFFLFFBQVE7b0JBQ2pCLEdBQUcsRUFBRSwwRkFBMEY7aUJBQ2hHO2FBQ0Y7U0FDRjtRQUNEO1lBQ0UsSUFBSSxFQUFFLGNBQWM7WUFDcEIsVUFBVSxFQUFFLGNBQWM7WUFDMUIsSUFBSSxFQUFFLGtFQUFrRTtZQUN4RSxJQUFJLEVBQUU7Z0JBQ0o7b0JBQ0UsT0FBTyxFQUFFLFFBQVE7b0JBQ2pCLEdBQUcsRUFBRSx5RkFBeUY7aUJBQy9GO2FBQ0Y7U0FDRjtLQUNGO0NBQ0YsQ0FBQztBQVNGLE1BQU0sVUFBVSxhQUFhO0lBQzNCLE1BQU0sY0FBYyxHQUFHLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUVsRSxJQUFJLENBQUMsY0FBYyxFQUFFO1FBQ25CLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ2Y7SUFFRCxPQUFPLFNBQVMsQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDLElBQUksQ0FLakUsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDaEIsSUFBSSxHQUFHLENBQUMsRUFBRSxFQUFFO1lBQ1YsT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDbkI7YUFBTTtZQUNMLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQyxDQUFDLEVBQ0YsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RCLENBQUMsQ0FBQyxFQUNGLEdBQUcsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRTtRQUNwQixPQUFPLFNBQVM7YUFDYixNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLGNBQWMsS0FBSyxPQUFPLENBQUMsQ0FDdkQ7YUFDQSxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUU7WUFDeEMsT0FBTztnQkFDTCxJQUFJO2dCQUNKLFVBQVU7Z0JBQ1YsSUFBSTtnQkFDSixHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLGNBQWMsS0FBSyxPQUFPLENBQUUsQ0FBQyxHQUFHO2FBQ2pFLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZnJvbUZldGNoIH0gZnJvbSAncnhqcy9mZXRjaCc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBnZXREZXNrdG9wQnJvd3NlclR5cGUgfSBmcm9tICcuLi91dGlscy9icm93c2VyLWNoZWNrJztcblxuaW50ZXJmYWNlIEV4dGVuc2lvbnMge1xuICB3aGl0ZWxpc3Q6IEFycmF5PHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgaWRlbnRpZmllcjogc3RyaW5nO1xuICAgIGljb246IHN0cmluZztcbiAgICB1cmxzOiBBcnJheTx7XG4gICAgICBicm93c2VyOiAnY2hyb21lJyB8ICdlZGdlJyB8ICdmaXJlZm94JyB8ICdzYWZhcmknO1xuICAgICAgdXJsOiBzdHJpbmc7XG4gICAgfT47XG4gIH0+O1xufVxuXG5jb25zdCBGQUxMQkFDSzogRXh0ZW5zaW9ucyA9IHtcbiAgd2hpdGVsaXN0OiBbXG4gICAge1xuICAgICAgbmFtZTogJ1RlcnJhIFN0YXRpb24nLFxuICAgICAgaWRlbnRpZmllcjogJ3N0YXRpb24nLFxuICAgICAgaWNvbjogJ2h0dHBzOi8vYXNzZXRzLnRlcnJhLm1vbmV5L2ljb24vc3RhdGlvbi1leHRlbnNpb24vaWNvbi5wbmcnLFxuICAgICAgdXJsczogW1xuICAgICAgICB7XG4gICAgICAgICAgYnJvd3NlcjogJ2Nocm9tZScsXG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvdGVycmEtc3RhdGlvbi9haWlmYm5iZm9icG1lZWtpcGhlZWlqaW1kcG5scGdwcCcsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ1hERUZJIFdhbGxldCcsXG4gICAgICBpZGVudGlmaWVyOiAneGRlZmktd2FsbGV0JyxcbiAgICAgIGljb246ICdodHRwczovL3hkZWZpLXByb2QtY29tbW9uLXVpLnMzLmV1LXdlc3QtMS5hbWF6b25hd3MuY29tL2xvZ28uc3ZnJyxcbiAgICAgIHVybHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGJyb3dzZXI6ICdjaHJvbWUnLFxuICAgICAgICAgIHVybDogJ2h0dHBzOi8vY2hyb21lLmdvb2dsZS5jb20vd2Vic3RvcmUvZGV0YWlsL3hkZWZpLXdhbGxldC9obWVvYm5mbmZjbWRrZGNtbGJsZ2FnbWZwZmJvaWVhZicsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gIF0sXG59O1xuXG5pbnRlcmZhY2UgSW5zdGFsbGFibGVFeHRlbnNpb24ge1xuICBuYW1lOiBzdHJpbmc7XG4gIGlkZW50aWZpZXI6IHN0cmluZztcbiAgaWNvbjogc3RyaW5nO1xuICB1cmw6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEV4dGVuc2lvbnMoKTogT2JzZXJ2YWJsZTxJbnN0YWxsYWJsZUV4dGVuc2lvbltdPiB7XG4gIGNvbnN0IGN1cnJlbnRCcm93c2VyID0gZ2V0RGVza3RvcEJyb3dzZXJUeXBlKG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gIGlmICghY3VycmVudEJyb3dzZXIpIHtcbiAgICByZXR1cm4gb2YoW10pO1xuICB9XG5cbiAgcmV0dXJuIGZyb21GZXRjaCgnaHR0cHM6Ly9hc3NldHMudGVycmEubW9uZXkvZXh0ZW5zaW9ucy5qc29uJykucGlwZTxcbiAgICBFeHRlbnNpb25zLFxuICAgIEV4dGVuc2lvbnMsXG4gICAgSW5zdGFsbGFibGVFeHRlbnNpb25bXVxuICA+KFxuICAgIHN3aXRjaE1hcCgocmVzKSA9PiB7XG4gICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9mKEZBTExCQUNLKTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBjYXRjaEVycm9yKCgpID0+IHtcbiAgICAgIHJldHVybiBvZihGQUxMQkFDSyk7XG4gICAgfSksXG4gICAgbWFwKCh7IHdoaXRlbGlzdCB9KSA9PiB7XG4gICAgICByZXR1cm4gd2hpdGVsaXN0XG4gICAgICAgIC5maWx0ZXIoKHsgdXJscyB9KSA9PlxuICAgICAgICAgIHVybHMuc29tZSgoeyBicm93c2VyIH0pID0+IGN1cnJlbnRCcm93c2VyID09PSBicm93c2VyKSxcbiAgICAgICAgKVxuICAgICAgICAubWFwKCh7IG5hbWUsIGlkZW50aWZpZXIsIGljb24sIHVybHMgfSkgPT4ge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgICAgIGljb24sXG4gICAgICAgICAgICB1cmw6IHVybHMuZmluZCgoeyBicm93c2VyIH0pID0+IGN1cnJlbnRCcm93c2VyID09PSBicm93c2VyKSEudXJsLFxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0pLFxuICApO1xufVxuIl19