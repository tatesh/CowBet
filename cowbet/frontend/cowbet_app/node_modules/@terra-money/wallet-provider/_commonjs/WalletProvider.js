"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletProvider = void 0;
const use_wallet_1 = require("@terra-money/use-wallet");
const wallet_controller_1 = require("@terra-money/wallet-controller");
const react_1 = __importStar(require("react"));
const EMPTY_ARRAY = [];
const EMPTY_SUPPORT_FEATURES = new Set();
function WalletProvider({ children, defaultNetwork, walletConnectChainIds, connectorOpts, pushServerOpts, createReadonlyWalletSession, selectExtension, waitingChromeExtensionInstallCheck, dangerously__chromeExtensionCompatibleBrowserCheck, }) {
    const [controller] = (0, react_1.useState)(() => new wallet_controller_1.WalletController({
        defaultNetwork,
        walletConnectChainIds,
        connectorOpts,
        pushServerOpts,
        createReadonlyWalletSession,
        selectExtension,
        waitingChromeExtensionInstallCheck,
        dangerously__chromeExtensionCompatibleBrowserCheck,
    }));
    const [availableConnectTypes, setAvailableConnectTypes] = (0, react_1.useState)(() => []);
    const [availableInstallTypes, setAvailableInstallTypes] = (0, react_1.useState)(() => []);
    const [availableConnections, setAvailableConnections] = (0, react_1.useState)(() => []);
    const [availableInstallations, setAvailableInstallations] = (0, react_1.useState)(() => []);
    const [states, setStates] = (0, react_1.useState)(() => ({
        status: use_wallet_1.WalletStatus.INITIALIZING,
        network: defaultNetwork,
    }));
    (0, react_1.useEffect)(() => {
        const availableConnectTypesSubscription = controller
            .availableConnectTypes()
            .subscribe({
            next: (value) => {
                setAvailableConnectTypes(value);
            },
        });
        const availableInstallTypesSubscription = controller
            .availableInstallTypes()
            .subscribe({
            next: (value) => {
                setAvailableInstallTypes(value);
            },
        });
        const availableConnectionsSubscription = controller
            .availableConnections()
            .subscribe({
            next: (value) => {
                setAvailableConnections(value);
            },
        });
        const availableInstallationsSubscription = controller
            .availableInstallations()
            .subscribe({
            next: (value) => {
                setAvailableInstallations(value);
            },
        });
        const statesSubscription = controller.states().subscribe({
            next: (value) => {
                setStates(value);
            },
        });
        return () => {
            availableConnectTypesSubscription.unsubscribe();
            availableInstallTypesSubscription.unsubscribe();
            availableConnectionsSubscription.unsubscribe();
            availableInstallationsSubscription.unsubscribe();
            statesSubscription.unsubscribe();
        };
    }, [controller]);
    const state = (0, react_1.useMemo)(() => {
        return {
            availableConnectTypes,
            availableInstallTypes,
            availableConnections,
            availableInstallations,
            status: states.status,
            network: states.network,
            wallets: states.status === use_wallet_1.WalletStatus.WALLET_CONNECTED
                ? states.wallets
                : EMPTY_ARRAY,
            install: controller.install,
            connect: controller.connect,
            connectReadonly: controller.connectReadonly,
            disconnect: controller.disconnect,
            connection: states.status === use_wallet_1.WalletStatus.WALLET_CONNECTED
                ? states.connection
                : undefined,
            supportFeatures: states.status === use_wallet_1.WalletStatus.WALLET_CONNECTED
                ? states.supportFeatures
                : EMPTY_SUPPORT_FEATURES,
            post: controller.post,
            sign: controller.sign,
            signBytes: controller.signBytes,
            hasCW20Tokens: controller.hasCW20Tokens,
            addCW20Tokens: controller.addCW20Tokens,
            hasNetwork: controller.hasNetwork,
            addNetwork: controller.addNetwork,
            refetchStates: controller.refetchStates,
            recheckStatus: controller.refetchStates,
            isChromeExtensionCompatibleBrowser: controller.isChromeExtensionCompatibleBrowser,
        };
    }, [
        availableConnectTypes,
        availableInstallTypes,
        availableConnections,
        availableInstallations,
        controller,
        states,
    ]);
    return (react_1.default.createElement(use_wallet_1.WalletContext.Provider, { value: state }, children));
}
exports.WalletProvider = WalletProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2FsbGV0UHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQHRlcnJhLW1vbmV5L3dhbGxldC1wcm92aWRlci9XYWxsZXRQcm92aWRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLHdEQVNpQztBQUNqQyxzRUFHd0M7QUFDeEMsK0NBQXVFO0FBTXZFLE1BQU0sV0FBVyxHQUFpQixFQUFFLENBQUM7QUFDckMsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLEdBQUcsRUFBNkIsQ0FBQztBQUVwRSxTQUFnQixjQUFjLENBQUMsRUFDN0IsUUFBUSxFQUNSLGNBQWMsRUFDZCxxQkFBcUIsRUFDckIsYUFBYSxFQUNiLGNBQWMsRUFDZCwyQkFBMkIsRUFDM0IsZUFBZSxFQUNmLGtDQUFrQyxFQUNsQyxrREFBa0QsR0FDOUI7SUFDcEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFDM0IsR0FBRyxFQUFFLENBQ0gsSUFBSSxvQ0FBZ0IsQ0FBQztRQUNuQixjQUFjO1FBQ2QscUJBQXFCO1FBQ3JCLGFBQWE7UUFDYixjQUFjO1FBQ2QsMkJBQTJCO1FBQzNCLGVBQWU7UUFDZixrQ0FBa0M7UUFDbEMsa0RBQWtEO0tBQ25ELENBQUMsQ0FDTCxDQUFDO0lBRUYsTUFBTSxDQUFDLHFCQUFxQixFQUFFLHdCQUF3QixDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUVoRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVaLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSx3QkFBd0IsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFFaEUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFWixNQUFNLENBQUMsb0JBQW9CLEVBQUUsdUJBQXVCLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBRTlELEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRVosTUFBTSxD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LENBQUMsTUFBTSxLQUFLLHlCQUFZLENBQUMsZ0JBQWdCO2dCQUM3QyxDQUFDLENBQUMsTUFBTSxDQUFDLGVBQWU7Z0JBQ3hCLENBQUMsQ0FBQyxzQkFBc0I7WUFDNUIsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJO1lBQ3JCLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSTtZQUNyQixTQUFTLEVBQUUsVUFBVSxDQUFDLFNBQVM7WUFDL0IsYUFBYSxFQUFFLFVBQVUsQ0FBQyxhQUFhO1lBQ3ZDLGFBQWEsRUFBRSxVQUFVLENBQUMsYUFBYTtZQUN2QyxVQUFVLEVBQUUsVUFBVSxDQUFDLFVBQVU7WUFDakMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxVQUFVO1lBQ2pDLGFBQWEsRUFBRSxVQUFVLENBQUMsYUFBYTtZQUN2QyxhQUFhLEVBQUUsVUFBVSxDQUFDLGFBQWE7WUFDdkMsa0NBQWtDLEVBQ2hDLFVBQVUsQ0FBQyxrQ0FBa0M7U0FDaEQsQ0FBQztJQUNKLENBQUMsRUFBRTtRQUNELHFCQUFxQjtRQUNyQixxQkFBcUI7UUFDckIsb0JBQW9CO1FBQ3BCLHNCQUFzQjtRQUN0QixVQUFVO1FBQ1YsTUFBTTtLQUNQLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FDTCw4QkFBQywwQkFBYSxDQUFDLFFBQVEsSUFBQyxLQUFLLEVBQUUsS0FBSyxJQUFHLFFBQVEsQ0FBMEIsQ0FDMUUsQ0FBQztBQUNKLENBQUM7QUE5SUQsd0NBOElDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVycmFXZWJFeHRlbnNpb25GZWF0dXJlcyB9IGZyb20gJ0B0ZXJyYS1tb25leS93ZWItZXh0ZW5zaW9uLWludGVyZmFjZSc7XG5pbXBvcnQge1xuICBDb25uZWN0aW9uLFxuICBDb25uZWN0VHlwZSxcbiAgSW5zdGFsbGF0aW9uLFxuICBXYWxsZXQsXG4gIFdhbGxldENvbnRleHQsXG4gIFdhbGxldEluZm8sXG4gIFdhbGxldFN0YXRlcyxcbiAgV2FsbGV0U3RhdHVzLFxufSBmcm9tICdAdGVycmEtbW9uZXkvdXNlLXdhbGxldCc7XG5pbXBvcnQge1xuICBXYWxsZXRDb250cm9sbGVyLFxuICBXYWxsZXRDb250cm9sbGVyT3B0aW9ucyxcbn0gZnJvbSAnQHRlcnJhLW1vbmV5L3dhbGxldC1jb250cm9sbGVyJztcbmltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUsIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2FsbGV0UHJvdmlkZXJQcm9wcyBleHRlbmRzIFdhbGxldENvbnRyb2xsZXJPcHRpb25zIHtcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbn1cblxuY29uc3QgRU1QVFlfQVJSQVk6IFdhbGxldEluZm9bXSA9IFtdO1xuY29uc3QgRU1QVFlfU1VQUE9SVF9GRUFUVVJFUyA9IG5ldyBTZXQ8VGVycmFXZWJFeHRlbnNpb25GZWF0dXJlcz4oKTtcblxuZXhwb3J0IGZ1bmN0aW9uIFdhbGxldFByb3ZpZGVyKHtcbiAgY2hpbGRyZW4sXG4gIGRlZmF1bHROZXR3b3JrLFxuICB3YWxsZXRDb25uZWN0Q2hhaW5JZHMsXG4gIGNvbm5lY3Rvck9wdHMsXG4gIHB1c2hTZXJ2ZXJPcHRzLFxuICBjcmVhdGVSZWFkb25seVdhbGxldFNlc3Npb24sXG4gIHNlbGVjdEV4dGVuc2lvbixcbiAgd2FpdGluZ0Nocm9tZUV4dGVuc2lvbkluc3RhbGxDaGVjayxcbiAgZGFuZ2Vyb3VzbHlfX2Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyQ2hlY2ssXG59OiBXYWxsZXRQcm92aWRlclByb3BzKSB7XG4gIGNvbnN0IFtjb250cm9sbGVyXSA9IHVzZVN0YXRlPFdhbGxldENvbnRyb2xsZXI+KFxuICAgICgpID0+XG4gICAgICBuZXcgV2FsbGV0Q29udHJvbGxlcih7XG4gICAgICAgIGRlZmF1bHROZXR3b3JrLFxuICAgICAgICB3YWxsZXRDb25uZWN0Q2hhaW5JZHMsXG4gICAgICAgIGNvbm5lY3Rvck9wdHMsXG4gICAgICAgIHB1c2hTZXJ2ZXJPcHRzLFxuICAgICAgICBjcmVhdGVSZWFkb25seVdhbGxldFNlc3Npb24sXG4gICAgICAgIHNlbGVjdEV4dGVuc2lvbixcbiAgICAgICAgd2FpdGluZ0Nocm9tZUV4dGVuc2lvbkluc3RhbGxDaGVjayxcbiAgICAgICAgZGFuZ2Vyb3VzbHlfX2Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyQ2hlY2ssXG4gICAgICB9KSxcbiAgKTtcblxuICBjb25zdCBbYXZhaWxhYmxlQ29ubmVjdFR5cGVzLCBzZXRBdmFpbGFibGVDb25uZWN0VHlwZXNdID0gdXNlU3RhdGU8XG4gICAgQ29ubmVjdFR5cGVbXVxuICA+KCgpID0+IFtdKTtcblxuICBjb25zdCBbYXZhaWxhYmxlSW5zdGFsbFR5cGVzLCBzZXRBdmFpbGFibGVJbnN0YWxsVHlwZXNdID0gdXNlU3RhdGU8XG4gICAgQ29ubmVjdFR5cGVbXVxuICA+KCgpID0+IFtdKTtcblxuICBjb25zdCBbYXZhaWxhYmxlQ29ubmVjdGlvbnMsIHNldEF2YWlsYWJsZUNvbm5lY3Rpb25zXSA9IHVzZVN0YXRlPFxuICAgIENvbm5lY3Rpb25bXVxuICA+KCgpID0+IFtdKTtcblxuICBjb25zdCBbYXZhaWxhYmxlSW5zdGFsbGF0aW9ucywgc2V0QXZhaWxhYmxlSW5zdGFsbGF0aW9uc10gPSB1c2VTdGF0ZTxcbiAgICBJbnN0YWxsYXRpb25bXVxuICA+KCgpID0+IFtdKTtcblxuICBjb25zdCBbc3RhdGVzLCBzZXRTdGF0ZXNdID0gdXNlU3RhdGU8V2FsbGV0U3RhdGVzPigoKSA9PiAoe1xuICAgIHN0YXR1czogV2FsbGV0U3RhdHVzLklOSVRJQUxJWklORyxcbiAgICBuZXR3b3JrOiBkZWZhdWx0TmV0d29yayxcbiAgfSkpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgYXZhaWxhYmxlQ29ubmVjdFR5cGVzU3Vic2NyaXB0aW9uID0gY29udHJvbGxlclxuICAgICAgLmF2YWlsYWJsZUNvbm5lY3RUeXBlcygpXG4gICAgICAuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogKHZhbHVlKSA9PiB7XG4gICAgICAgICAgc2V0QXZhaWxhYmxlQ29ubmVjdFR5cGVzKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgY29uc3QgYXZhaWxhYmxlSW5zdGFsbFR5cGVzU3Vic2NyaXB0aW9uID0gY29udHJvbGxlclxuICAgICAgLmF2YWlsYWJsZUluc3RhbGxUeXBlcygpXG4gICAgICAuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogKHZhbHVlKSA9PiB7XG4gICAgICAgICAgc2V0QXZhaWxhYmxlSW5zdGFsbFR5cGVzKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgY29uc3QgYXZhaWxhYmxlQ29ubmVjdGlvbnNTdWJzY3JpcHRpb24gPSBjb250cm9sbGVyXG4gICAgICAuYXZhaWxhYmxlQ29ubmVjdGlvbnMoKVxuICAgICAgLnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgIHNldEF2YWlsYWJsZUNvbm5lY3Rpb25zKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgY29uc3QgYXZhaWxhYmxlSW5zdGFsbGF0aW9uc1N1YnNjcmlwdGlvbiA9IGNvbnRyb2xsZXJcbiAgICAgIC5hdmFpbGFibGVJbnN0YWxsYXRpb25zKClcbiAgICAgIC5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiAodmFsdWUpID0+IHtcbiAgICAgICAgICBzZXRBdmFpbGFibGVJbnN0YWxsYXRpb25zKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgY29uc3Qgc3RhdGVzU3Vic2NyaXB0aW9uID0gY29udHJvbGxlci5zdGF0ZXMoKS5zdWJzY3JpYmUoe1xuICAgICAgbmV4dDogKHZhbHVlKSA9PiB7XG4gICAgICAgIHNldFN0YXRlcyh2YWx1ZSk7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGF2YWlsYWJsZUNvbm5lY3RUeXBlc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgYXZhaWxhYmxlSW5zdGFsbFR5cGVzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICBhdmFpbGFibGVDb25uZWN0aW9uc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgYXZhaWxhYmxlSW5zdGFsbGF0aW9uc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgc3RhdGVzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW2NvbnRyb2xsZXJdKTtcblxuICBjb25zdCBzdGF0ZSA9IHVzZU1lbW88V2FsbGV0PigoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF2YWlsYWJsZUNvbm5lY3RUeXBlcyxcbiAgICAgIGF2YWlsYWJsZUluc3RhbGxUeXBlcyxcbiAgICAgIGF2YWlsYWJsZUNvbm5lY3Rpb25zLFxuICAgICAgYXZhaWxhYmxlSW5zdGFsbGF0aW9ucyxcbiAgICAgIHN0YXR1czogc3RhdGVzLnN0YXR1cyxcbiAgICAgIG5ldHdvcms6IHN0YXRlcy5uZXR3b3JrLFxuICAgICAgd2FsbGV0czpcbiAgICAgICAgc3RhdGVzLnN0YXR1cyA9PT0gV2FsbGV0U3RhdHVzLldBTExFVF9DT05ORUNURURcbiAgICAgICAgICA/IHN0YXRlcy53YWxsZXRzXG4gICAgICAgICAgOiBFTVBUWV9BUlJBWSxcbiAgICAgIGluc3RhbGw6IGNvbnRyb2xsZXIuaW5zdGFsbCxcbiAgICAgIGNvbm5lY3Q6IGNvbnRyb2xsZXIuY29ubmVjdCxcbiAgICAgIGNvbm5lY3RSZWFkb25seTogY29udHJvbGxlci5jb25uZWN0UmVhZG9ubHksXG4gICAgICBkaXNjb25uZWN0OiBjb250cm9sbGVyLmRpc2Nvbm5lY3QsXG4gICAgICBjb25uZWN0aW9uOlxuICAgICAgICBzdGF0ZXMuc3RhdHVzID09PSBXYWxsZXRTdGF0dXMuV0FMTEVUX0NPTk5FQ1RFRFxuICAgICAgICAgID8gc3RhdGVzLmNvbm5lY3Rpb25cbiAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgIHN1cHBvcnRGZWF0dXJlczpcbiAgICAgICAgc3RhdGVzLnN0YXR1cyA9PT0gV2FsbGV0U3RhdHVzLldBTExFVF9DT05ORUNURURcbiAgICAgICAgICA/IHN0YXRlcy5zdXBwb3J0RmVhdHVyZXNcbiAgICAgICAgICA6IEVNUFRZX1NVUFBPUlRfRkVBVFVSRVMsXG4gICAgICBwb3N0OiBjb250cm9sbGVyLnBvc3QsXG4gICAgICBzaWduOiBjb250cm9sbGVyLnNpZ24sXG4gICAgICBzaWduQnl0ZXM6IGNvbnRyb2xsZXIuc2lnbkJ5dGVzLFxuICAgICAgaGFzQ1cyMFRva2VuczogY29udHJvbGxlci5oYXNDVzIwVG9rZW5zLFxuICAgICAgYWRkQ1cyMFRva2VuczogY29udHJvbGxlci5hZGRDVzIwVG9rZW5zLFxuICAgICAgaGFzTmV0d29yazogY29udHJvbGxlci5oYXNOZXR3b3JrLFxuICAgICAgYWRkTmV0d29yazogY29udHJvbGxlci5hZGROZXR3b3JrLFxuICAgICAgcmVmZXRjaFN0YXRlczogY29udHJvbGxlci5yZWZldGNoU3RhdGVzLFxuICAgICAgcmVjaGVja1N0YXR1czogY29udHJvbGxlci5yZWZldGNoU3RhdGVzLFxuICAgICAgaXNDaHJvbWVFeHRlbnNpb25Db21wYXRpYmxlQnJvd3NlcjpcbiAgICAgICAgY29udHJvbGxlci5pc0Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyLFxuICAgIH07XG4gIH0sIFtcbiAgICBhdmFpbGFibGVDb25uZWN0VHlwZXMsXG4gICAgYXZhaWxhYmxlSW5zdGFsbFR5cGVzLFxuICAgIGF2YWlsYWJsZUNvbm5lY3Rpb25zLFxuICAgIGF2YWlsYWJsZUluc3RhbGxhdGlvbnMsXG4gICAgY29udHJvbGxlcixcbiAgICBzdGF0ZXMsXG4gIF0pO1xuXG4gIHJldHVybiAoXG4gICAgPFdhbGxldENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3N0YXRlfT57Y2hpbGRyZW59PC9XYWxsZXRDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuIl19