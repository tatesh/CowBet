/** User denied the request */
export class UserDenied extends Error {
    constructor() {
        super('User Denied');
        this.toString = () => {
            return `[${this.name}]`;
        };
        this.name = 'UserDenied';
    }
}
/** the user did not complete the action during a specific time */
export class Timeout extends Error {
    constructor(message) {
        super(message);
        this.toString = () => {
            return `[${this.name} message="${this.message}"]`;
        };
        this.name = 'Timeout';
    }
}
/** failed on signBytes() */
export class SignBytesFailed extends Error {
    constructor(bytes, message) {
        super(message);
        this.bytes = bytes;
        this.toString = () => {
            return `[${this.name} message="${this.message}"]`;
        };
        this.name = 'SignBytesFailed';
    }
}
/** Failed to create tx (did not make a txhash) */
export class CreateTxFailed extends Error {
    constructor(tx, message) {
        super(message);
        this.tx = tx;
        this.toString = () => {
            return `[${this.name} message="${this.message}"]\n${JSON.stringify(this.tx, null, 2)}`;
        };
        this.name = 'CreateTxFailed';
    }
}
/** Failed process the tx (maked a txhash) */
export class TxFailed extends Error {
    constructor(tx, txhash, message, raw_message) {
        super(message);
        this.tx = tx;
        this.txhash = txhash;
        this.raw_message = raw_message;
        this.toString = () => {
            return `[${this.name} txhash="${this.txhash}" message="${this.message}"]\n${JSON.stringify(this.tx, null, 2)}\n${JSON.stringify(this.raw_message, null, 2)}`;
        };
        this.name = 'TxFailed';
    }
}
/** Unknown error */
export class TxUnspecifiedError extends Error {
    constructor(tx, message) {
        super(message);
        this.tx = tx;
        this.toString = () => {
            return `[${this.name} message="${this.message}"]\n${JSON.stringify(this.tx, null, 2)}`;
        };
        this.name = 'TxUnspecifiedError';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL0B0ZXJyYS1tb25leS93YWxsZXQtdHlwZXMvZXJyb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLDhCQUE4QjtBQUM5QixNQUFNLE9BQU8sVUFBVyxTQUFRLEtBQUs7SUFDbkM7UUFDRSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7UUFJdkIsYUFBUSxHQUFHLEdBQUcsRUFBRTtZQUNkLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUM7UUFDMUIsQ0FBQyxDQUFDO1FBTEEsSUFBSSxDQUFDLElBQUksR0FBRyxZQUFZLENBQUM7SUFDM0IsQ0FBQztDQUtGO0FBRUQsa0VBQWtFO0FBQ2xFLE1BQU0sT0FBTyxPQUFRLFNBQVEsS0FBSztJQUNoQyxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBSWpCLGFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDZCxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksYUFBYSxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUM7UUFDcEQsQ0FBQyxDQUFDO1FBTEEsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7SUFDeEIsQ0FBQztDQUtGO0FBRUQsNEJBQTRCO0FBQzVCLE1BQU0sT0FBTyxlQUFnQixTQUFRLEtBQUs7SUFDeEMsWUFBNEIsS0FBYSxFQUFFLE9BQWU7UUFDeEQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRFcsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUt6QyxhQUFRLEdBQUcsR0FBRyxFQUFFO1lBQ2QsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLGFBQWEsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDO1FBQ3BELENBQUMsQ0FBQztRQUxBLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUM7SUFDaEMsQ0FBQztDQUtGO0FBRUQsa0RBQWtEO0FBQ2xELE1BQU0sT0FBTyxjQUFlLFNBQVEsS0FBSztJQUN2QyxZQUE0QixFQUFtQixFQUFFLE9BQWU7UUFDOUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRFcsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFLL0MsYUFBUSxHQUFHLEdBQUcsRUFBRTtZQUNkLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxhQUFhLElBQUksQ0FBQyxPQUFPLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FDaEUsSUFBSSxDQUFDLEVBQUUsRUFDUCxJQUFJLEVBQ0osQ0FBQyxDQUNGLEVBQUUsQ0FBQztRQUNOLENBQUMsQ0FBQztRQVRBLElBQUksQ0FBQyxJQUFJLEdBQUcsZ0JBQWdCLENBQUM7SUFDL0IsQ0FBQztDQVNGO0FBRUQsNkNBQTZDO0FBQzdDLE1BQU0sT0FBTyxRQUFTLFNBQVEsS0FBSztJQUNqQyxZQUNrQixFQUFtQixFQUNuQixNQUEwQixFQUMxQyxPQUFlLEVBQ0MsV0FBZ0I7UUFFaEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBTEMsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFDbkIsV0FBTSxHQUFOLE1BQU0sQ0FBb0I7UUFFMUIsZ0JBQVcsR0FBWCxXQUFXLENBQUs7UUFNbEMsYUFBUSxHQUFHLEdBQUcsRUFBRTtZQUNkLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxZQUFZLElBQUksQ0FBQyxNQUFNLGNBQ3pDLElBQUksQ0FBQyxPQUNQLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUN4RCxJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLEVBQ0osQ0FBQyxDQUNGLEVBQUUsQ0FBQztRQUNOLENBQUMsQ0FBQztRQVhBLElBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDO0lBQ3pCLENBQUM7Q0FXRjtBQUVELG9CQUFvQjtBQUNwQixNQUFNLE9BQU8sa0JBQW1CLFNBQVEsS0FBSztJQUMzQyxZQUE0QixFQUFtQixFQUFFLE9BQWU7UUFDOUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRFcsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFLL0MsYUFBUSxHQUFHLEdBQUcsRUFBRTtZQUNkLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxhQUFhLElBQUksQ0FBQyxPQUFPLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FDaEUsSUFBSSxDQUFDLEVBQUUsRUFDUCxJQUFJLEVBQ0osQ0FBQyxDQUNGLEVBQUUsQ0FBQztRQUNOLENBQUMsQ0FBQztRQVRBLElBQUksQ0FBQyxJQUFJLEdBQUcsb0JBQW9CLENBQUM7SUFDbkMsQ0FBQztDQVNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3JlYXRlVHhPcHRpb25zIH0gZnJvbSAnQHRlcnJhLW1vbmV5L3RlcnJhLmpzJztcblxuLyoqIFVzZXIgZGVuaWVkIHRoZSByZXF1ZXN0ICovXG5leHBvcnQgY2xhc3MgVXNlckRlbmllZCBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ1VzZXIgRGVuaWVkJyk7XG4gICAgdGhpcy5uYW1lID0gJ1VzZXJEZW5pZWQnO1xuICB9XG5cbiAgdG9TdHJpbmcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGBbJHt0aGlzLm5hbWV9XWA7XG4gIH07XG59XG5cbi8qKiB0aGUgdXNlciBkaWQgbm90IGNvbXBsZXRlIHRoZSBhY3Rpb24gZHVyaW5nIGEgc3BlY2lmaWMgdGltZSAqL1xuZXhwb3J0IGNsYXNzIFRpbWVvdXQgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9ICdUaW1lb3V0JztcbiAgfVxuXG4gIHRvU3RyaW5nID0gKCkgPT4ge1xuICAgIHJldHVybiBgWyR7dGhpcy5uYW1lfSBtZXNzYWdlPVwiJHt0aGlzLm1lc3NhZ2V9XCJdYDtcbiAgfTtcbn1cblxuLyoqIGZhaWxlZCBvbiBzaWduQnl0ZXMoKSAqL1xuZXhwb3J0IGNsYXNzIFNpZ25CeXRlc0ZhaWxlZCBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGJ5dGVzOiBCdWZmZXIsIG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9ICdTaWduQnl0ZXNGYWlsZWQnO1xuICB9XG5cbiAgdG9TdHJpbmcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGBbJHt0aGlzLm5hbWV9IG1lc3NhZ2U9XCIke3RoaXMubWVzc2FnZX1cIl1gO1xuICB9O1xufVxuXG4vKiogRmFpbGVkIHRvIGNyZWF0ZSB0eCAoZGlkIG5vdCBtYWtlIGEgdHhoYXNoKSAqL1xuZXhwb3J0IGNsYXNzIENyZWF0ZVR4RmFpbGVkIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgdHg6IENyZWF0ZVR4T3B0aW9ucywgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gJ0NyZWF0ZVR4RmFpbGVkJztcbiAgfVxuXG4gIHRvU3RyaW5nID0gKCkgPT4ge1xuICAgIHJldHVybiBgWyR7dGhpcy5uYW1lfSBtZXNzYWdlPVwiJHt0aGlzLm1lc3NhZ2V9XCJdXFxuJHtKU09OLnN0cmluZ2lmeShcbiAgICAgIHRoaXMudHgsXG4gICAgICBudWxsLFxuICAgICAgMixcbiAgICApfWA7XG4gIH07XG59XG5cbi8qKiBGYWlsZWQgcHJvY2VzcyB0aGUgdHggKG1ha2VkIGEgdHhoYXNoKSAqL1xuZXhwb3J0IGNsYXNzIFR4RmFpbGVkIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHg6IENyZWF0ZVR4T3B0aW9ucyxcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHhoYXNoOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIHB1YmxpYyByZWFkb25seSByYXdfbWVzc2FnZTogYW55LFxuICApIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSAnVHhGYWlsZWQnO1xuICB9XG5cbiAgdG9TdHJpbmcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGBbJHt0aGlzLm5hbWV9IHR4aGFzaD1cIiR7dGhpcy50eGhhc2h9XCIgbWVzc2FnZT1cIiR7XG4gICAgICB0aGlzLm1lc3NhZ2VcbiAgICB9XCJdXFxuJHtKU09OLnN0cmluZ2lmeSh0aGlzLnR4LCBudWxsLCAyKX1cXG4ke0pTT04uc3RyaW5naWZ5KFxuICAgICAgdGhpcy5yYXdfbWVzc2FnZSxcbiAgICAgIG51bGwsXG4gICAgICAyLFxuICAgICl9YDtcbiAgfTtcbn1cblxuLyoqIFVua25vd24gZXJyb3IgKi9cbmV4cG9ydCBjbGFzcyBUeFVuc3BlY2lmaWVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSB0eDogQ3JlYXRlVHhPcHRpb25zLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSAnVHhVbnNwZWNpZmllZEVycm9yJztcbiAgfVxuXG4gIHRvU3RyaW5nID0gKCkgPT4ge1xuICAgIHJldHVybiBgWyR7dGhpcy5uYW1lfSBtZXNzYWdlPVwiJHt0aGlzLm1lc3NhZ2V9XCJdXFxuJHtKU09OLnN0cmluZ2lmeShcbiAgICAgIHRoaXMudHgsXG4gICAgICBudWxsLFxuICAgICAgMixcbiAgICApfWA7XG4gIH07XG59XG4iXX0=