import { Fee, Msg, } from '@terra-money/terra.js';
export var WebExtensionTxStatus;
(function (WebExtensionTxStatus) {
    WebExtensionTxStatus["PROGRESS"] = "PROGRESS";
    WebExtensionTxStatus["SUCCEED"] = "SUCCEED";
    WebExtensionTxStatus["FAIL"] = "FAIL";
    WebExtensionTxStatus["DENIED"] = "DENIED";
})(WebExtensionTxStatus || (WebExtensionTxStatus = {}));
export function serializeTx(tx) {
    var _a, _b, _c;
    return {
        msgs: tx.msgs.map((msg) => msg.toJSON()),
        fee: (_a = tx.fee) === null || _a === void 0 ? void 0 : _a.toJSON(),
        memo: tx.memo,
        gasPrices: (_b = tx.gasPrices) === null || _b === void 0 ? void 0 : _b.toString(),
        gasAdjustment: (_c = tx.gasAdjustment) === null || _c === void 0 ? void 0 : _c.toString(),
        feeDenoms: tx.feeDenoms,
    };
}
export function deserializeTx(tx) {
    const msgs = tx.msgs.map((msg) => JSON.parse(msg));
    const isProto = '@type' in msgs[0];
    return {
        ...tx,
        msgs: msgs.map((msg) => (isProto ? Msg.fromData(msg) : Msg.fromAmino(msg))),
        fee: tx.fee
            ? isProto
                ? Fee.fromData(JSON.parse(tx.fee))
                : Fee.fromAmino(JSON.parse(tx.fee))
            : undefined,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQHRlcnJhLW1vbmV5L3dlYi1leHRlbnNpb24taW50ZXJmYWNlL21vZGVscy90eC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsR0FBRyxFQUNILEdBQUcsR0FHSixNQUFNLHVCQUF1QixDQUFDO0FBTy9CLE1BQU0sQ0FBTixJQUFZLG9CQUtYO0FBTEQsV0FBWSxvQkFBb0I7SUFDOUIsNkNBQXFCLENBQUE7SUFDckIsMkNBQW1CLENBQUE7SUFDbkIscUNBQWEsQ0FBQTtJQUNiLHlDQUFpQixDQUFBO0FBQ25CLENBQUMsRUFMVyxvQkFBb0IsS0FBcEIsb0JBQW9CLFFBSy9CO0FBeUVELE1BQU0sVUFBVSxXQUFXLENBQUMsRUFBbUI7O0lBQzdDLE9BQU87UUFDTCxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN4QyxHQUFHLEVBQUUsTUFBQSxFQUFFLENBQUMsR0FBRywwQ0FBRSxNQUFNLEVBQUU7UUFDckIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJO1FBQ2IsU0FBUyxFQUFFLE1BQUEsRUFBRSxDQUFDLFNBQVMsMENBQUUsUUFBUSxFQUFFO1FBQ25DLGFBQWEsRUFBRSxNQUFBLEVBQUUsQ0FBQyxhQUFhLDBDQUFFLFFBQVEsRUFBRTtRQUMzQyxTQUFTLEVBQUUsRUFBRSxDQUFDLFNBQVM7S0FDeEIsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEVBQTZCO0lBQ3pELE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbkQsTUFBTSxPQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVuQyxPQUFPO1FBQ0wsR0FBRyxFQUFFO1FBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDM0UsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHO1lBQ1QsQ0FBQyxDQUFDLE9BQU87Z0JBQ1AsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2xDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxTQUFTO0tBQ2QsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDcmVhdGVUeE9wdGlvbnMsXG4gIEZlZSxcbiAgTXNnLFxuICBQdWJsaWNLZXksXG4gIFR4LFxufSBmcm9tICdAdGVycmEtbW9uZXkvdGVycmEuanMnO1xuaW1wb3J0IHtcbiAgV2ViRXh0ZW5zaW9uQ3JlYXRlVHhGYWlsZWQsXG4gIFdlYkV4dGVuc2lvblR4RmFpbGVkLFxuICBXZWJFeHRlbnNpb25UeFVuc3BlY2lmaWVkRXJyb3IsXG59IGZyb20gJy4uL2Vycm9ycyc7XG5cbmV4cG9ydCBlbnVtIFdlYkV4dGVuc2lvblR4U3RhdHVzIHtcbiAgUFJPR1JFU1MgPSAnUFJPR1JFU1MnLFxuICBTVUNDRUVEID0gJ1NVQ0NFRUQnLFxuICBGQUlMID0gJ0ZBSUwnLFxuICBERU5JRUQgPSAnREVOSUVEJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXZWJFeHRlbnNpb25UeFByb2dyZXNzIHtcbiAgc3RhdHVzOiBXZWJFeHRlbnNpb25UeFN0YXR1cy5QUk9HUkVTUztcbiAgcGF5bG9hZD86IHVua25vd247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2ViRXh0ZW5zaW9uUG9zdFBheWxvYWQge1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgcmF3X2xvZzogc3RyaW5nO1xuICB0eGhhc2g6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgV2ViRXh0ZW5zaW9uU2lnblBheWxvYWQgPSBUeC5EYXRhO1xuXG5leHBvcnQgaW50ZXJmYWNlIFdlYkV4dGVuc2lvblNpZ25CeXRlc1BheWxvYWQge1xuICByZWNpZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBiYXNlNjQgVWludDhBcnJheVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBcbiAgICogLy8gc3RyaW5naWZpZWQgYnlcbiAgICogQnVmZmVyLmZyb20oVWludDhBcnJheSkudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAqXG4gICAqIC8vIHRvIFVpbnQ4QXJyYXlcbiAgICogVWludDhBcnJheS5mcm9tKEJ1ZmZlci5mcm9tKGJhc2U2NFN0cmluZywgJ2Jhc2U2NCcpKVxuICAgKiBgYGBcbiAgICovXG4gIHNpZ25hdHVyZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBcbiAgICogUHVibGljS2V5LmZyb21EYXRhKHB1YmxpY19rZXkpXG4gICAqIGBgYFxuICAgKi9cbiAgcHVibGljX2tleT86IFB1YmxpY0tleS5EYXRhO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlYkV4dGVuc2lvblR4U3VjY2VlZDxQYXlsb2FkPiB7XG4gIHN0YXR1czogV2ViRXh0ZW5zaW9uVHhTdGF0dXMuU1VDQ0VFRDtcbiAgcGF5bG9hZDogUGF5bG9hZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXZWJFeHRlbnNpb25UeEZhaWwge1xuICBzdGF0dXM6IFdlYkV4dGVuc2lvblR4U3RhdHVzLkZBSUw7XG4gIGVycm9yOlxuICAgIHwgV2ViRXh0ZW5zaW9uQ3JlYXRlVHhGYWlsZWRcbiAgICB8IFdlYkV4dGVuc2lvblR4RmFpbGVkXG4gICAgfCBXZWJFeHRlbnNpb25UeFVuc3BlY2lmaWVkRXJyb3I7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2ViRXh0ZW5zaW9uVHhEZW5pZWQge1xuICBzdGF0dXM6IFdlYkV4dGVuc2lvblR4U3RhdHVzLkRFTklFRDtcbn1cblxuZXhwb3J0IHR5cGUgV2ViRXh0ZW5zaW9uVHhSZXN1bHQ8UGF5bG9hZD4gPVxuICB8IFdlYkV4dGVuc2lvblR4UHJvZ3Jlc3NcbiAgfCBXZWJFeHRlbnNpb25UeFN1Y2NlZWQ8UGF5bG9hZD5cbiAgfCBXZWJFeHRlbnNpb25UeEZhaWxcbiAgfCBXZWJFeHRlbnNpb25UeERlbmllZDtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBmdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGludGVyZmFjZSBTZXJpYWxpemVkQ3JlYXRlVHhPcHRpb25zXG4gIGV4dGVuZHMgT21pdDxDcmVhdGVUeE9wdGlvbnMsICdtc2dzJyB8ICdmZWUnPiB7XG4gIG1zZ3M6IHN0cmluZ1tdO1xuICBmZWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZVR4KHR4OiBDcmVhdGVUeE9wdGlvbnMpOiBTZXJpYWxpemVkQ3JlYXRlVHhPcHRpb25zIHtcbiAgcmV0dXJuIHtcbiAgICBtc2dzOiB0eC5tc2dzLm1hcCgobXNnKSA9PiBtc2cudG9KU09OKCkpLFxuICAgIGZlZTogdHguZmVlPy50b0pTT04oKSxcbiAgICBtZW1vOiB0eC5tZW1vLFxuICAgIGdhc1ByaWNlczogdHguZ2FzUHJpY2VzPy50b1N0cmluZygpLFxuICAgIGdhc0FkanVzdG1lbnQ6IHR4Lmdhc0FkanVzdG1lbnQ/LnRvU3RyaW5nKCksXG4gICAgZmVlRGVub21zOiB0eC5mZWVEZW5vbXMsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZVR4KHR4OiBTZXJpYWxpemVkQ3JlYXRlVHhPcHRpb25zKTogQ3JlYXRlVHhPcHRpb25zIHtcbiAgY29uc3QgbXNncyA9IHR4Lm1zZ3MubWFwKChtc2cpID0+IEpTT04ucGFyc2UobXNnKSk7XG4gIGNvbnN0IGlzUHJvdG8gPSAnQHR5cGUnIGluIG1zZ3NbMF07XG5cbiAgcmV0dXJuIHtcbiAgICAuLi50eCxcbiAgICBtc2dzOiBtc2dzLm1hcCgobXNnKSA9PiAoaXNQcm90byA/IE1zZy5mcm9tRGF0YShtc2cpIDogTXNnLmZyb21BbWlubyhtc2cpKSksXG4gICAgZmVlOiB0eC5mZWVcbiAgICAgID8gaXNQcm90b1xuICAgICAgICA/IEZlZS5mcm9tRGF0YShKU09OLnBhcnNlKHR4LmZlZSkpXG4gICAgICAgIDogRmVlLmZyb21BbWlubyhKU09OLnBhcnNlKHR4LmZlZSkpXG4gICAgICA6IHVuZGVmaW5lZCxcbiAgfTtcbn1cbiJdfQ==